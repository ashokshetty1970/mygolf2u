openapi: 3.0.0
info:
  title: Tee-time Booking And Registration APIs
  version: '1.0'
  contact:
    name: Ashok Shetty
    email: ashok@britesoftcorp.com
  description: 'Set of APIs '
servers:
  - url: 'http://devlet.mygolf2u.com/rest/tee-time'
    description: myGolf2u Devlet
paths:
  /activate:
    post:
      summary: ''
      operationId: post-activate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                description: 'Returns true on successfull activation. In case of errors, it returns HttpStatus.CONFLICT'
        '409':
          description: Conflict
          headers:
            Error-Code:
              schema:
                type: string
              description: The unique error code when the activation fails.
            Error-Message:
              schema:
                type: string
              description: Detailed error messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
      description: Activate the booking and registration feature for a given clubs
      parameters:
        - schema:
            type: integer
          in: query
          name: clubId
          description: The ID of the club for which the feature needs to be activated.
          required: true
  /generate-template-slots:
    post:
      summary: Generate Template Slots
      operationId: post-generate-template-slots
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '409':
          description: Conflict
          headers:
            Error-Code:
              schema:
                type: string
              description: The error code
            Error-Message:
              schema:
                type: string
              description: The full description of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              examples: {}
      description: Generate the template slots for a given day or for all the days in the rule or for a specific day
      parameters:
        - schema:
            type: integer
          in: query
          name: ruleId
          description: The ID of the slot generation rule. This parameter is mandatory.
          required: true
        - schema:
            type: string
          in: query
          name: dayName
          description: The name of the day. This is short name which is part of the key in day rule table. This is an optional parameter. If provided the templates are generated only for the given day.
      tags:
        - REST APIs
  /generate-slots:
    post:
      summary: Generate Slots
      operationId: post-generate-slots
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                description: 'returns true if slots are generated successfully. If error occurs, request returns CONFLCT status'
        '409':
          description: Conflict
          headers:
            Error-Code:
              schema:
                type: string
              description: The unique error code which represents a specific error in myGolf2u server. This error code is expanded using resource bundle into Error-Message header
            Error-Message:
              schema:
                type: string
              description: Details error message representing the Error-Code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
      description: |-
        Generate the actual slot for a given course for a date or range of dates. This API assumes following things.
        1. A valid rule is defined and associated to the course
        2. The template slots are generated and setup as required.
      parameters:
        - schema:
            type: integer
          in: query
          name: courseId
          description: The ID of the course for which the slots needs to be generated.
          required: true
        - schema:
            type: string
          in: query
          name: startDate
          required: true
          description: 'The start date string in the format of yyyy-MM-dd. For example, 2020-05-20'
        - schema:
            type: string
          in: query
          name: endDate
          description: 'Optional end date in the format yyyy-MM-dd. The end date if provided, must be greater than the startDate.'
      tags:
        - REST APIs
  /is-active:
    get:
      summary: Is Booking and Registration Enabled
      tags:
        - REST APIs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                description: Returns true if feature is enabled. False if not.
        '409':
          description: Conflict
          headers:
            Error-Code:
              schema:
                type: string
              description: The unique error code. If the club with the given id not found.
            Error-Message:
              schema:
                type: string
              description: The detailed error message
      operationId: get-is-active
      parameters:
        - schema:
            type: integer
          in: query
          name: clubId
          description: ID of the club for which we need to check whether booking and registration feature enabled or not.
          required: true
      description: Check whether tee-time booking and registration feature is enabled for a given club or not.
components:
  schemas:
    Errors:
      title: Errors
      type: object
      properties:
        errors:
          type: array
          description: 'List of all error messages. The main error message will be in the header Error-Message. If any additional error messages are there, then this will contain all the errors.'
          items:
            type: string
      x-examples:
        Sample Error Object:
          errors: []
    PlayerData:
      title: PlayerData
      type: object
      x-tags:
        - Models
        - Player
      description: The player data object
      properties:
        id:
          type: integer
        accountNo:
          type: string
        handicapSystemNo:
          type: string
        golfAssociationNo:
          type: string
        organisation:
          type: string
        nickName:
          type: string
        playerName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        passport:
          type: string
        email:
          type: string
        profile:
          type: string
        handicap:
          type: integer
        handicapIndex:
          type: number
        dateJoined:
          type: string
          description: The date in yyyy-MM-dd format
        dateOfBirth:
          type: string
        status:
          type: string
        image:
          type: string
        type:
          type: string
        age:
          type: integer
        gender:
          type: string
        complete:
          type: boolean
        color:
          type: string
        deviceToken:
          type: string
    CountryData:
      title: CountryData
      type: object
      properties:
        id:
          type: string
      description: Country Info
